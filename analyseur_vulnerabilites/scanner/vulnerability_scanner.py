# scanner/vulnerability_scanner.py

import requests
from bs4 import BeautifulSoup

def detect_sql_injection(url):
    response = requests.get(url)
    if response.status_code == 200:
        html_content = response.text
        if "SQL syntax error" in html_content or "mysql_fetch_array()" in html_content:
            return f"Injection SQL détectée sur : {url}"
        else:
            return f"Aucune injection SQL détectée sur : {url}"
    else:
        return f"Erreur lors de la requête HTTP vers : {url}"

def detect_code_injection(url):
    response = requests.get(url)
    if response.status_code == 200:
        html_content = response.text
        soup = BeautifulSoup(html_content, 'html.parser')
        if soup.find("script", src=True) or soup.find("script", text=True):
            return f"Injection de code détectée(script) sur : {url}"
        else:
            return f"Aucune injection de code détectée sur : {url}"
    else:
        return f"Erreur lors de la requête HTTP vers : {url}"

def detect_xss(url):
    payloads = ["<script>alert('XSS')</script>", "\";alert('XSS');//", "';alert('XSS');//"]
    parameters = ["q", "search", "id"]
    for param in parameters:
        for payload in payloads:
            injected_url = f"{url}?{param}={payload}"
            response = requests.get(injected_url)
            if response.status_code == 200:
                html_content = response.text
                if payload in html_content:
                    return f"XSS détecté sur {injected_url}"
            else:
                return f"Erreur lors de la requête HTTP vers : {injected_url} avec le code de statut {response.status_code}"
    return f"Aucune injection XSS détectée sur {url}"

def detect_csrf(url):
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        form = soup.find('form')
        if form:
            csrf_token = form.find('input', {'name': '_csrf_token'})
            if csrf_token:
                action = form.get('action')
                if not action.startswith('http'):
                    action = url.rstrip('/') + '/' + action.lstrip('/')
                form_data = {input_tag.get('name'): input_tag.get('value', '') for input_tag in form.find_all('input')}
                if '_csrf_token' in form_data:
                    del form_data['_csrf_token']
                response_post = requests.post(action, data=form_data)
                if response_post.status_code == 200:
                    return f"Possibilité d'attaque CSRF détectée sur {url}"
                else:
                    return f"Aucune vulnérabilité CSRF détectée sur {url} (Requête POST sans token CSRF rejetée)"
            else:
                return "Le formulaire ne contient pas de token CSRF, potentiellement vulnérable."
        else:
            return f"Aucun formulaire trouvé sur {url}"
    else:
        return f"Erreur lors de la requête HTTP vers : {url} avec le code de statut {response.status_code}"

def scanner(url):
    vulnerabilities = []
    vulnerabilities.append(detect_sql_injection(url))
    vulnerabilities.append(detect_code_injection(url))
    vulnerabilities.append(detect_xss(url))
    vulnerabilities.append(detect_csrf(url))
    return vulnerabilities